// Export the page as PDF format
import html2Canvas from 'html2canvas'
import JsPDF from 'jspdf'

export default {
  install(Vue, options) {
    Vue.prototype.getPdf = function() {
      var title = this.htmlTitle // Export name
      var type = this.downType // Export type true -> image false-> pdf
      var htmlID = document.getElementById('pdfDom')
      // window.pageYoffset = 0; // If there is a scrollbar effect, it will cause incomplete export content, you can directly set it to the top before exporting
      // document.documentElement.scrollTop = 0;
      // document.body.scrollTop = 0;
      html2Canvas(htmlID, {
        allowTaint: true,
        // scrollY: 50, // Offset, if affected by the scrollbar but don't want to set the scrollbar to the top, you can set this, but you need to calculate how much scrolling has occurred
        // scrollX:0,
        // x:0, // Distance from the left
        // y:10,
        // width: 1000,
        // height: 800
        // The following two are used to improve clarity
        dpi: window.devicePixelRatio * 4, // Increase the resolution to a specific DPI four times
        scale: 4, // Increase resolution proportionally
        useCORS: true // [Important] Enable cross-origin configuration
      }).then(function(canvas) {
        const contentWidth = canvas.width
        const contentHeight = canvas.height

        // One page of pdf displays the height of the canvas generated by the html page
        const pageHeight = contentWidth / 592.28 * 841.89
        // The height of the html page that has not generated the pdf
        let leftHeight = contentHeight
        // Page offset
        let position = 0
        const imgWidth = 592.28
        // A4 paper size [595.28,841.89], width and height of the canvas generated by the html page in the pdf
        // let imgHeight = 592.28 / contentWidth * contentHeight
        const imgHeight = 592.28 / contentWidth * contentHeight
        // 1.0 clarity 0-1
        const pageData = canvas.toDataURL('image/jpeg', 1.0)

        if (type) {
          // Generate image
          // Create an 'a' tag and set the href and download attributes
          const el = document.createElement('a')
          // Set href to the base64-encoded string of the image, default is png format
          el.href = pageData
          el.download = title
          // Create a click event and trigger it on the 'a' tag
          const event = new MouseEvent('click')
          el.dispatchEvent(event)
        } else {
          // Generate pdf
          // There are two heights to distinguish, one is the actual height of the html page, and the other is the height of the pdf page (841.89)
          // When the content does not exceed the range displayed by one page of pdf, there is no need to paginate
          // l horizontal by default vertical
          const PDF = new JsPDF('l', 'pt', 'a4')
          if (leftHeight < pageHeight) {
            PDF.addImage(pageData, 'JPEG', 0, 0, imgWidth, imgHeight)
          } else {
            while (leftHeight > 0) {
              PDF.addImage(pageData, 'JPEG', 0, position, imgWidth, imgHeight)
              leftHeight -= pageHeight
              position -= 841.89
              if (leftHeight > 0) {
                PDF.addPage()
              }
            }
          }
          PDF.save(title + '.pdf')
        }
      })
    }
  }
}
